from importer import Importer
from exporter import Exporter
from circlsource import CirclSource
from rfsource import RFSource
import argparse


class RfVuln:
    def main(self):
        self.resolveArgs()
        
        cveList = self.load()
        result = None

        print("Cve(s) cargados: {}".format(len(cveList)))

        if(self.args.source == 'circl'):
            src = CirclSource()
            src.setCVEList(cveList)
            result = src.process()
        elif(self.args.source == 'rfl' or self.args.source == 'rfr'):
            mode = None
            if self.args.source == 'rfl':
                mode = 1
            elif self.args.source == 'rfr':
                mode = 2
            
            opts = {
                'mode': mode
            }

            src = RFSource()
            src.setCVEList(cveList)
            result = src.process(opts)

        if result == None:
            print('Error desconocido my bro')
        else:
            exporter = Exporter()
            exporter.export(result, 'out.csv')

    def resolveArgs(self):
        parser = argparse.ArgumentParser("CVE Enricher Tool MultiSource By Jorge")
        parser.add_argument("-fcsv", "--filecsv", required=True, type=str, help="Ruta del archivo CSV que contiene la lista CVS")
        parser.add_argument("-fn", "--fieldName", required=False, type=str, help="Nombre de la columna en el CSV que contiene la lista de CVS")
        parser.add_argument("-s", "--source", required=True, type=str, help="Fuente de datos desde donde se enriquecera el CVS")
        parser.add_argument("-fout", "--fileout", required=False, type=str, help="Especificar el nombre del archivo de salida. Por defecto es \"./out.csv\"")

        self.args = parser.parse_args()
    

    def load(self):
        return Importer().loadCves(self.args.filecsv)

if __name__ == '__main__':
    RfVuln().main()