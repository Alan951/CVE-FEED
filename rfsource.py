import requests
from datetime import datetime
import csv


class RFSource():

    def setCVEList(self, cveList):
        self.inputCveList = cveList

    def process(self, opts):
        fsrc = None
        result = []

        result.append({
            "headerInfo": ['cve', 'found', 'risk']
        })

        if 'mode' in opts:
            if opts['mode'] == 1: #Modo local. Intenta leer el archivo local
                #TODO: Buscar archivo mas reciente buscando entre los archivos mediante REGEX
                fsrc = 'RF_21-08-2020T17-01-46.csv'
            elif opts['mode'] == 2: #Modo remoto. Descarga el archivo
                fsrc = self.downloadCVEDB()
        
        with open(fsrc, newline="", encoding="utf8") as csvfile:
            self.reader = csv.reader(csvfile)

            for cve in self.inputCveList:
                csvfile.seek(0)
                item = self.searchCVE(cve)
                if item == None: #No encontro el cve
                    result.append({
                        'cve': cve,
                        'found': False
                    })

                    continue

                item = self.extractGoldData(item)
                print(item)
                result.append(item)
        
        return result


    def searchCVE(self, cve):
        for row in self.reader:
            if(row[0].upper() == cve.upper()):
                return row
        else:
            return None
        
    def extractGoldData(self, item):
        return {
            'cve': item[0],
            'found': True,
            'risk': item[1]
        }

    def downloadCVEDB(self):
        url = 'https://api.recordedfuture.com/v2/vulnerability/risklist?format=csv%2Fsplunk&list=large'
        #TODO: Load Token

        r = requests.get(url, headers={'X-RFToken': token}, verify=False)

        fname = 'RF_{}.csv'.format(datetime.now().strftime('%d-%m-%YT%H-%M-%S'))
        open(fname, 'wb').write(r.content)

        return fname

    
    
                


    
if __name__ == "__main__":
    src = RFSource()
    src.downloadCVEDB()
    